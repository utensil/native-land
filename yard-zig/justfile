export HOMEBREW_NO_AUTO_UPDATE := "1"
export ZIG_OUT := env("ZIG_OUT", "zig-out")
export ZIG_CACHE := env("ZIG_CACHE", ".zig-cache")
ZIG_OPT := "-p ${ZIG_OUT} --cache-dir ${ZIG_CACHE}"

default:
  just --list

# prep:
#   brew install zig

[no-cd]
prep-asdf:
  which asdf || brew install asdf
  asdf plugin add zig https://github.com/asdf-community/asdf-zig.git
  asdf plugin update zig
  asdf install

prep-mise:
  #!/usr/bin/env bash
  which mise || brew install mise
  echo 'Ensure run the following in ~/.bashrc or ~/.zshrc:'
  echo 'eval "$(mise activate $(basename "$0"))"'
  cat << 'EOF'
  e.g. echo 'eval "$(mise activate zsh)"' >> ~/.zshrc
  EOF
  # mise supports zig with a core plugin

# https://github.com/zigtools/zls/issues/2402
# note that this installs a local zls
[no-cd]
prep-zls:
    #!/usr/bin/env zsh
    set -e
    which zig || mise install || (echo "zig not found in this environment, failed to install zls" && exit 1)
    ZIG_VERSION=`zig version`
    ZIG_VERSION_ESCAPED=`echo $ZIG_VERSION|sed -e 's/\+/%2B/g'`
    # ZIG_ARCH=`zig env|jq -r '.target | split(".")[0]'`
    # echo "$ZIG_VERSION $ZIG_VERSION_ESCAPED $ZIG_ARCH"
    # curl "https://releases.zigtools.org/v1/zls/select-version?zig_version=$ZIG_VERSION_ESCAPED&compatibility=only-runtime"|jq ".\"$ZIG_ARCH\""
    ZLS_VERSION=`curl "https://releases.zigtools.org/v1/zls/select-version?zig_version=$ZIG_VERSION_ESCAPED&compatibility=only-runtime"|jq -r ".version"`
    mise use aqua:zigtools/zls@$ZLS_VERSION

# [no-cd]
# prep-zig VERSION:
#   asdf install zig {{VERSION}}
#   asdf set zig {{VERSION}}
#   # now zig is available either by `asdf which zig` or adding $HOME/.asdf/shims to your PATH

# master
# ref:master
# requires latest mise since zig 0.14.1
# see https://github.com/jdx/mise/pull/5182
[no-cd]
prep-zig VERSION:
  mise use zig@{{VERSION}}

# REPO looks like git+https://HOST/USER/REPO.git
[no-cd]
fetch:
  #!/usr/bin/env bash
  # working around https://github.com/ziglang/zig/issues/22542
  unset HTTP_PROXY
  unset HTTPS_PROXY
  unset http_proxy
  unset https_proxy
  which zig
  zig build --fetch {{ZIG_OPT}} 

[no-cd]
dep REPO:
  #!/usr/bin/env bash
  # working around https://github.com/ziglang/zig/issues/22542
  unset HTTP_PROXY
  unset HTTPS_PROXY
  unset http_proxy
  unset https_proxy
  zig fetch --save {{REPO}}

[no-cd]
build: fetch
  zig build {{ZIG_OPT}} 

[no-cd]
run: fetch
  zig build {{ZIG_OPT}} run

[no-cd]
test FILTER="": fetch
  TEST_FILTER={{FILTER}} zig build {{ZIG_OPT}} test --summary all

new PROJ:
  #!/usr/bin/env bash
  set -e
  mkdir {{PROJ}}
  cd {{PROJ}}
  echo "Which version of zig do you want to use for project {{PROJ}}?"
  read -r ZIG_VERSION
  just prep-zig ${ZIG_VERSION}
  zig init

try-mlx INPUT MODEL_TYPE="qwen" NUM_TOKENS="1000":
  #!/usr/bin/env bash
  cd example-xp
  if [ ! -d "MLX.zig" ]; then
    git clone https://github.com/jaco-bro/MLX.zig.git
  else
    (cd MLX.zig && git pull)
  fi
  cd MLX.zig
  just prep-zig 0.13.0
  zig build
  ./zig-out/bin/llm --num-tokens={{NUM_TOKENS}} --model-type={{MODEL_TYPE}} "{{INPUT}}"

# Clean all build artifacts across projects
[no-cd]
clean-all:
  #!/usr/bin/env bash
  echo "Cleaning all Zig projects..."
  find . -name "zig-cache" -type d -exec rm -rf {} + 2>/dev/null || true
  find . -name ".zig-cache" -type d -exec rm -rf {} + 2>/dev/null || true
  find . -name "zig-out" -type d -exec rm -rf {} + 2>/dev/null || true
  echo "All build artifacts cleaned."
