export HOMEBREW_NO_AUTO_UPDATE := "1"
export ZIG_OUT := env("ZIG_OUT", "zig-out")
export ZIG_CACHE := env("ZIG_CACHE", ".zig-cache")
ZIG_OPT := "-p ${ZIG_OUT} --cache-dir ${ZIG_CACHE}"

default:
  just --list

# prep:
#   brew install zig

[no-cd]
prep-asdf:
  which asdf || brew install asdf
  asdf plugin add zig https://github.com/asdf-community/asdf-zig.git
  asdf plugin update zig
  asdf install

prep-mise:
  #!/usr/bin/env zsh
  which mise || brew install mise
  echo 'Ensure run the following in ~/.bashrc or ~/.zshrc:'
  echo 'eval "$(mise activate ${0:t})"'
  cat << 'EOF'
  e.g. echo 'eval "$(mise activate zsh)"' >> ~/.zshrc
  EOF
  # mise supports zig with a core plugin

# [no-cd]
# prep-zig VERSION:
#   asdf install zig {{VERSION}}
#   asdf set zig {{VERSION}}
#   # now zig is available either by `asdf which zig` or adding $HOME/.asdf/shims to your PATH

# master
# ref:master
# requires latest mise since zig 0.14.1
# see https://github.com/jdx/mise/pull/5182
[no-cd]
prep-zig VERSION:
  mise use zig@{{VERSION}}

# REPO looks like git+https://HOST/USER/REPO.git
[no-cd]
fetch:
  #!/usr/bin/env bash
  # working around https://github.com/ziglang/zig/issues/22542
  unset HTTP_PROXY
  unset HTTPS_PROXY
  unset http_proxy
  unset https_proxy
  zig build --fetch {{ZIG_OPT}} 

[no-cd]
dep REPO:
  #!/usr/bin/env bash
  # working around https://github.com/ziglang/zig/issues/22542
  unset HTTP_PROXY
  unset HTTPS_PROXY
  unset http_proxy
  unset https_proxy
  zig fetch --save {{REPO}}

[no-cd]
build: fetch
  zig build {{ZIG_OPT}} 

[no-cd]
run: fetch
  zig build {{ZIG_OPT}} run

[no-cd]
test FILTER="": fetch
  TEST_FILTER={{FILTER}} zig build {{ZIG_OPT}} test --summary all

new PROJ:
  #!/usr/bin/env bash
  set -e
  mkdir {{PROJ}}
  cd {{PROJ}}
  echo "Which version of zig do you want to use for project {{PROJ}}?"
  read -r ZIG_VERSION
  just prep-zig ${ZIG_VERSION}
  zig init

try-mlx INPUT MODEL_TYPE="qwen" NUM_TOKENS="1000":
  #!/usr/bin/env bash
  cd example-xp
  if [ ! -d "MLX.zig" ]; then
    git clone https://github.com/jaco-bro/MLX.zig.git
  else
    (cd MLX.zig && git pull)
  fi
  cd MLX.zig
  just prep-zig 0.13.0
  zig build
  ./zig-out/bin/llm --num-tokens={{NUM_TOKENS}} --model-type={{MODEL_TYPE}} "{{INPUT}}"

# Fix ZLS standard library issue without config file
[no-cd]
fix-zls:
  #!/usr/bin/env bash
  set -euo pipefail
  
  echo "Fixing ZLS standard library issue..."
  
  # Get the actual Zig installation path
  if command -v asdf >/dev/null 2>&1 && asdf current zig >/dev/null 2>&1; then
    ZIG_PATH=$(asdf where zig)
    ZIG_EXE="$ZIG_PATH/bin/zig"
  else
    ZIG_EXE=$(which zig)
  fi
  
  echo "Found Zig at: $ZIG_EXE"
  
  # Create a local bin directory and symlink
  mkdir -p "$HOME/.local/bin"
  
  # Remove existing symlink if it exists
  rm -f "$HOME/.local/bin/zig"
  
  # Create symlink to the actual zig binary (not the shim)
  ln -sf "$ZIG_EXE" "$HOME/.local/bin/zig"
  
  echo "Created symlink: $HOME/.local/bin/zig -> $ZIG_EXE"
  
  # Kill any running ZLS processes
  pkill -f zls || echo "No ZLS processes to kill"
  
  # Clear ZLS cache
  rm -rf "$HOME/Library/Caches/zls"
  mkdir -p "$HOME/Library/Caches/zls"
  
  # Remove any existing ZLS config file to use defaults
  rm -f "$HOME/Library/Application Support/zls.json"
  
  echo ""
  echo "ZLS fix applied:"
  echo "1. Created symlink to actual Zig binary"
  echo "2. Cleared ZLS cache"
  echo "3. Removed ZLS config file (using defaults)"
  echo ""
  
  # Check PATH ordering - only consider first occurrence of each
  LOCAL_BIN_POS=$(echo "$PATH" | tr ':' '\n' | grep -n "^$HOME/.local/bin$" | head -1 | cut -d: -f1)
  ASDF_SHIMS_POS=$(echo "$PATH" | tr ':' '\n' | grep -n "^$HOME/.asdf/shims$" | head -1 | cut -d: -f1)
  
  if [ -n "$LOCAL_BIN_POS" ] && [ -n "$ASDF_SHIMS_POS" ] && [ "$LOCAL_BIN_POS" -lt "$ASDF_SHIMS_POS" ]; then
    echo "✓ PATH is correctly ordered (.local/bin before asdf shims)"
  else
    echo "ℹ️  PATH check (in this subprocess environment):"
    echo "$PATH" | tr ':' '\n' | grep -n "local/bin\|asdf" | head -5
    echo ""
    echo "Note: This subprocess may not reflect your actual shell PATH."
    echo "If your shell has ~/.local/bin before ~/.asdf/shims, ZLS should work fine."
    echo "Otherwise, ensure ~/.local/bin comes first in your PATH."
  fi
  
  echo ""
  echo "Restart your editor to apply the changes."

# Check ZLS status and provide PATH guidance
[no-cd]
check-zls:
  #!/usr/bin/env bash
  set -euo pipefail
  
  echo "ZLS Status Check:"
  echo "=================="
  
  echo "ZLS version:"
  zls --version
  
  echo ""
  echo "ZLS environment:"
  zls env
  
  echo ""
  echo "Zig binary locations:"
  echo "which zig: $(which zig)"
  if [ -L "$HOME/.local/bin/zig" ]; then
    echo "Local symlink: $HOME/.local/bin/zig -> $(readlink $HOME/.local/bin/zig)"
  else
    echo "No local symlink found"
  fi
  
  echo ""
  echo "PATH check (showing relevant entries):"
  echo "$PATH" | tr ':' '\n' | grep -E "(local/bin|asdf)" | head -5
  
  echo ""
  echo "Zig environment:"
  zig env
  
  echo ""
  echo "ZLS configuration file:"
  if [ -f "$HOME/Library/Application Support/zls.json" ]; then
      echo "Config file exists (consider removing it):"
      cat "$HOME/Library/Application Support/zls.json"
  else
      echo "No ZLS configuration file (good - using defaults)"
  fi
  
  echo ""
  echo "Recent ZLS logs:"
  if [ -f "$HOME/Library/Caches/zls/zls.log" ]; then
      tail -10 "$HOME/Library/Caches/zls/zls.log"
  else
      echo "No ZLS log file found"
  fi

# Test that the ZLS fix actually works
[no-cd]
test-zls-fix:
  #!/usr/bin/env bash
  set -euo pipefail
  
  echo "Testing ZLS fix..."
  echo "=================="
  
  # Check if symlink exists
  if [ ! -L "$HOME/.local/bin/zig" ]; then
    echo "❌ Symlink not found. Run 'just fix-zls' first."
    exit 1
  fi
  
  echo "✓ Symlink exists: $HOME/.local/bin/zig -> $(readlink $HOME/.local/bin/zig)"
  
  # Test with corrected PATH
  export PATH="$HOME/.local/bin:$PATH"
  
  echo "✓ PATH corrected, zig resolves to: $(which zig)"
  
  # Test zig env command (this is what ZLS tries to do)
  echo "Testing 'zig env' command (what ZLS executes):"
  if zig env >/dev/null 2>&1; then
    echo "✓ 'zig env' works successfully"
    echo "  Standard library: $(zig env | jq -r '.std_dir')"
  else
    echo "❌ 'zig env' failed - ZLS would still have issues"
    exit 1
  fi
  
  # Check if ZLS config file is absent
  if [ -f "$HOME/Library/Application Support/zls.json" ]; then
    echo "⚠ ZLS config file exists - consider removing it to use defaults"
  else
    echo "✓ No ZLS config file (using defaults)"
  fi
  
  # Test a simple Zig compilation to ensure everything works
  echo "Testing Zig compilation:"
  echo 'const std = @import("std"); pub fn main() !void { std.debug.print("ZLS fix test successful!\\n", .{}); }' > /tmp/test_zls.zig
  
  if zig build-exe /tmp/test_zls.zig -femit-bin=/tmp/test_zls >/dev/null 2>&1; then
    echo "✓ Zig compilation works"
    /tmp/test_zls
    rm -f /tmp/test_zls /tmp/test_zls.zig
  else
    echo "❌ Zig compilation failed"
    exit 1
  fi
  
  echo ""
  echo "🎉 ZLS fix test passed!"
  echo ""
  echo "Next steps:"
  echo "1. Add 'export PATH=\"\$HOME/.local/bin:\$PATH\"' to your shell profile"
  echo "2. Restart your shell or run: export PATH=\"\$HOME/.local/bin:\$PATH\""
  echo "3. Restart your editor (Zed)"
  echo "4. Open a Zig file and verify ZLS works without standard library errors"

# Clean all build artifacts across projects
[no-cd]
clean-all:
  #!/usr/bin/env bash
  echo "Cleaning all Zig projects..."
  find . -name "zig-cache" -type d -exec rm -rf {} + 2>/dev/null || true
  find . -name ".zig-cache" -type d -exec rm -rf {} + 2>/dev/null || true
  find . -name "zig-out" -type d -exec rm -rf {} + 2>/dev/null || true
  echo "All build artifacts cleaned."
